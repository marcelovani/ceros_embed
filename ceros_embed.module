<?php

/**
 * @file
 * Main module functions for the ceros_embed module.
 */

/**
 * Implements hook_help().
 */
function ceros_embed_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ceros_embed':
      $output = '<p>' . t('The Ceros Embed module allows Ceros to be embedded on nodes.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_info().
 */
function ceros_embed_field_info() {
  return array(
    'ceros_embed' => array(
      'label' => t('Ceros Embed'),
      'description' => t('Allows Ceros to be embedded on nodes.'),
      'settings' => array(
        'max_length' => '',
      ),
      'instance_settings' => array(
        'text_processing' => 0,
      ),
      'default_widget' => 'ceros_embed',
      'default_formatter' => 'ceros_embed',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function ceros_embed_field_widget_info() {
  return array(
    'ceros_embed' => array(
      'label' => t('Ceros Embed'),
      'field types' => array(
        'ceros_embed',
      ),
      'settings' => array(
        'rows' => 5,
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function ceros_embed_field_formatter_info() {
  return array(
    'ceros_embed' => array(
      'label' => t('Ceros Embed'),
      'field types' => array(
        'ceros_embed',
      ),
      'settings' => array(
        'replace_node_content' => 0,
        'hide_page_title' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function ceros_embed_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => 'fieldset',
  );

  switch ($instance['widget']['type']) {
    case 'ceros_embed':
      $element['value'] = array(
        '#title' => 'Snippet',
        '#type' => 'textarea',
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : '',
        '#delta' => $delta,
        '#element_validate' => array(
          'ceros_embed_ceros_embed_field_validate',
        ),
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function ceros_embed_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  switch ($instance['widget']['type']) {
    case 'ceros_embed':
      $element['replace_node_content'] = array(
        '#type' => 'checkbox',
        '#title' => t('Replace node content'),
        '#default_value' => $settings['replace_node_content'],
        '#multiple' => FALSE,
      );
      $element['hide_page_title'] = array(
        '#type' => 'checkbox',
        '#title' => t('Hide page title'),
        '#default_value' => $settings['hide_page_title'],
        '#multiple' => FALSE,
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function ceros_embed_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  switch ($instance['widget']['type']) {
    case 'ceros_embed':
      $summary_lines[] = !empty($settings['replace_node_content']) ? t('Replace node content') : t('Display inline');
      $summary_lines[] = !empty($settings['hide_page_title']) ? t('Hide page title') : t('Show page title');
      $summary = implode('<br />', $summary_lines);
      break;
  }

  return $summary;
}

/**
 * Implements hook_field_is_empty().
 */
function ceros_embed_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Callback for ceros_embed validation.
 */
function ceros_embed_ceros_embed_field_validate($element, &$form_state) {
  if (!empty($element['#value'])) {
    $value = check_markup($element['#value'], 'ceros_embed');
    form_set_value($element, $value, $form_state);
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function ceros_embed_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // Return if there are no items to render.
  // This prevents Ceros JS and empty field markup appearing on the page.
  if (empty($items)) {
    return array();
  }

  // Include display settings in element array so that we can refer to them in
  // alter hooks to hide page elements.
  $element = array('settings' => $display['settings']);

  switch ($display['type']) {
    case 'ceros_embed':
      // Attach Ceros embed JS.
      $element['#attached']['js'] = array(
        '//view.ceros.com/scroll-proxy.min.js' => array(
          'type' => 'external',
          'scope' => 'footer',
          'attributes' => array(
            'async' => 'async',
          ),
        ),
      );

      // Add snippet markup.
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => check_markup($item['value'], 'ceros_embed'),
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_process_page().
 */
function ceros_embed_process_page(&$variables) {
  if (!$field = ceros_embed_get_page_node_field($variables['page'])) {
    return;
  }
  // Hide the page title when configured in the display settings.
  if (isset($field['settings']['hide_page_title']) && $field['settings']['hide_page_title'] === 1) {
    $variables['title'] = '';
  }
}

/**
 * Implements hook_page_alter().
 */
function ceros_embed_page_alter(&$page) {
  if (!$field = ceros_embed_get_page_node_field($page)) {
    return;
  }
  if (isset($field['settings']['replace_node_content']) && $field['settings']['replace_node_content'] === 1) {
    $page['content']['ceros_embed'] = $field;

    // Set weight to 0 and sort so that it appears in the same position
    // as the main node.
    $page['content']['ceros_embed']['#weight'] = 0;
    uasort($page['content'], 'element_sort');

    // Hide element, rather than remove so that it is still available
    // in hook_process_page().
    hide($page['content']['system_main']['nodes'][menu_get_object()->nid]);
  }
}

/**
 * Get the Ceros settings from the current menu node..
 */
function ceros_embed_get_page_node_field($page) {
  if (!$node = menu_get_object()) {
    return;
  }
  if (!isset($page['content']['system_main']['nodes'][$node->nid])) {
    return;
  }
  $node_content = $page['content']['system_main']['nodes'][$node->nid];
  foreach ($node_content as $field) {
    if (is_array($field) && isset($field['#field_type']) && $field['#field_type'] == 'ceros_embed') {
      return $field;
    }
  }
}

/**
 * Sanitize Ceros embed snippet.
 *
 * @param string $text
 *   The text to sanitize.
 * @param object $filter
 *   The filter being used to sanitize.
 *
 * @return string
 *   The sanitized text.
 */
function _ceros_embed_sanitize_markup($text, $filter) {
  $allowed_html = _ceros_embed_allowed_tags_to_array($filter->settings['allowed_html']);

  // Remove line breaks as these get html encoded.
  $text = preg_replace("/\r|\n/", "", $text);

  // Strip disallowed tags.
  $text = strip_tags($text, '<' . implode('><', array_keys($allowed_html)) . '>');

  // Trim any leading/trailing whitespace.
  $text = trim($text);

  // Remove any attributes that aren't allowed.
  $dom = filter_dom_load($text);
  $xpath = new DOMXPath($dom);

  foreach ($allowed_html as $tag => $allowed_attributes) {
    $attributes = $xpath->query('//' . $tag . '/@*');
    foreach ($attributes as $attribute) {
      if (!in_array($attribute->name, $allowed_attributes)) {
        $attribute->ownerElement->removeAttribute($attribute->name);
      }
    }
  }

  return filter_dom_serialize($dom);
}

/**
 * Return array of allowed tags and attributes.
 *
 * @return array
 *   Nested array of tags and their allowed attributes.
 */
function _ceros_embed_allowed_tags_to_array($allowed_html) {
  $allowed_html_array = array();
  $tags = explode(',', $allowed_html);
  foreach ($tags as $tag) {
    preg_match_all('~(.*?)\[(.*?)\]~', $tag, $matches);

    // Tag name is the first part of the match.
    // Fall back on the entire tag in case no attributes were specified.
    $tag_name = !empty($matches[1][0]) ? $matches[1][0] : $tag;
    $tag_name = trim($tag_name);

    // Attributes are the second match, separated by pipes.
    $attributes = !empty($matches[2][0]) ? explode('|', $matches[2][0]) : array();
    $attributes = array_map('trim', $attributes);

    $allowed_html_array[$tag_name] = $attributes;
  }

  return $allowed_html_array;
}

/**
 * Format settings callback.
 *
 * @param array $form
 *   The form.
 * @param array $form_state
 *   The form state.
 * @param object $filter
 *   The filter object.
 * @param object $format
 *   The format object.
 * @param array $defaults
 *   The default filter settings.
 *
 * @return array
 *   Array of filter setting fields.
 */
function _ceros_embed_sanitize_markup_settings(array $form, array &$form_state, $filter, $format, array $defaults) {
  $filter->settings += $defaults;
  $settings['allowed_html'] = array(
    '#type' => 'textfield',
    '#title' => t('Allowed HTML tags and attributes'),
    '#default_value' => $filter->settings['allowed_html'],
    '#maxlength' => 1024,
    '#description' => t('A list of HTML tags and attributes that can be used. e.g. div[style|id],iframe[src|class]'),
  );
  return $settings;
}

/**
 * Implements hook_filter_info().
 */
function ceros_embed_filter_info() {
  // We cannot use the 'filter_html' filter as this calls filter_xss(), which
  // strips style attributes. 'style' attributes are required for Ceros embed
  // to work correctly.
  $filters['ceros_embed_sanitize_markup'] = array(
    'title' => t('Ceros Embed: Sanitize Markup'),
    'process callback' => '_ceros_embed_sanitize_markup',
    'settings callback' => '_ceros_embed_sanitize_markup_settings',
  );
  return $filters;
}
